[comment encoding = UTF-8 /]
[module generateNEDFile('http://www.uclm.es/UML/profiles/UML2Cloud/1','http://www.eclipse.org/uml2/5.0.0/UML')]
[import es::uclm::uml2cloud::m2t::simcan::files::util /]

[template public generateNEDFile(aCloudInfrastructure : CloudInfrastructure)]

[file (aCloudInfrastructure.getFolder()+'scenario.ned', false, 'UTF-8')]
[aCloudInfrastructure.generateHeaderNEDFile()/]
[aCloudInfrastructure.datacenterElements.generateDataCenter()/]
[aCloudInfrastructure.generateScenario()/]
[/file]
[/template]

[template public generateHeaderNEDFile(aCloudInfrastructure : CloudInfrastructure)]
package simcan2.simulations.[aCloudInfrastructure.base_Component.name/];

import simcan2.Architecture.Nodes.Cloud.CloudBlade;
import simcan2.Architecture.Nodes.Cloud.CloudBoard;
import simcan2.Architecture.Nodes.Cloud.CloudRack;
import simcan2.Management.DataCenterManager.DataCenterManager;
import simcan2.Management.CloudProviders.*.*;
import simcan2.Architecture.Network.DataCenterNetwork.*;
import simcan2.Management.UserGenerators.UserGenerator.*;
import simcan2.Management.UserGenerators.UserGeneratorBase.*;

[/template]

[template public generateDataCenter(aDataCenterElement : DataCenterElement) ? (aDataCenterElement.numberOfDataCenters>0)]
// ---------------------------------------------------------------
//   Definition of the data-center [aDataCenterElement.dataCenterType.base_Component.name/]
// ---------------------------------------------------------------
module [aDataCenterElement.dataCenterType.base_Component.name/]{

	parameters:
		string appList;
		string vmList;
		string userList;

	gates:
		input fromCloudProvider;
		output toCloudProvider;
	
	// -------------------------------------------------------
	//   Definition of main modules
	// -------------------------------------------------------
	submodules:

		// ---------------------------------------------------------------
		//   Definition of the data-center manager
		// ---------------------------------------------------------------
		dcManager:DataCenterManager{
			parameters:
				appList=appList;
				vmList=vmList;
				userList=userList;
		}

		// ---------------------------------------------------------------
		//   Definition of Computing Racks
		// ---------------------------------------------------------------
		[aDataCenterElement.dataCenterType.rackElements->select(rackType.oclIsTypeOf(ComputingRack)).generateRackElement()/]

		// ---------------------------------------------------------------
		//   Definition of Storage Racks
		// ---------------------------------------------------------------
		[aDataCenterElement.dataCenterType.rackElements->select(rackType.oclIsTypeOf(StorageRack)).generateRackElement()/]

		// ---------------------------------------------------------------
		//   Definition of Network
		// ---------------------------------------------------------------
		[aDataCenterElement.dataCenterType.generateDataCenterNetwork()/]

	// ---------------------------------------------------------------
	//   Connections section
	// ---------------------------------------------------------------
	connections allowunconnected:

		// Connections between Data-Center manager and Data-center outside
		dcManager.out --> ned.IdealChannel --> toCloudProvider;
		dcManager.in <-- ned.IdealChannel <-- fromCloudProvider;

		// Connections between computing racks and the network
		[aDataCenterElement.dataCenterType.rackElements->select(rackType.oclIsTypeOf(ComputingRack)).generateRackComputingConnection(aDataCenterElement.dataCenterType.network)/]

		// Connections between storage racks and the network
		[aDataCenterElement.dataCenterType.rackElements->select(rackType.oclIsTypeOf(StorageRack)).generateRackStorageConnection(aDataCenterElement.dataCenterType.network)/]

}

[/template]

[template public generateRackElement(aRackElement : RackElement) ? (aRackElement.numberOfRacks>0)]
[for (index : Integer | Sequence(Integer){1..aRackElement.numberOfRacks})]
[aRackElement.rackType.eClass().name.toLowerFirst()/]_[aRackElement.rackType.base_Component.name/]_[index/]:CloudRack;
[/for]
[/template]

[template public generateDataCenterNetwork(aDataCenter : DataCenter)]
dataCenterNetwork:DataCenterNetwork{
	gates:
		inComm['['/][aDataCenter.rackElements->select(rackType.oclIsKindOf(ComputingRack))->collectNested(numberOfRacks)->sum()/][']'/];
		outComm['['+aDataCenter.rackElements->select(rackType.oclIsKindOf(ComputingRack))->collectNested(numberOfRacks)->sum()+']'/];
		inStorage['['+aDataCenter.rackElements->select(rackType.oclIsKindOf(StorageRack))->collectNested(numberOfRacks)->sum()+']'/];
		outStorage['['+aDataCenter.rackElements->select(rackType.oclIsKindOf(StorageRack))->collectNested(numberOfRacks)->sum()+']'/];
}
[/template]

[template public generateRackComputingConnection(aRackElement : RackElement, network : Bandwidth)  ? (aRackElement.numberOfRacks>0)]
[for (index : Integer | Sequence(Integer){1..aRackElement.numberOfRacks})]
[aRackElement.rackType.eClass().name.toLowerFirst()/]_[aRackElement.rackType.base_Component.name/]_[index/].out --> {datarate=[network.getBandwidth()/];} --> dataCenterNetwork.inComm++;
[aRackElement.rackType.eClass().name.toLowerFirst()/]_[aRackElement.rackType.base_Component.name/]_[index/].in <-- {datarate=[network.getBandwidth()/];} <-- dataCenterNetwork.outComm++;
[/for]
[/template]

[template public generateRackStorageConnection(aRackElement : RackElement, network : Bandwidth)  ? (aRackElement.numberOfRacks>0)]
[for (index : Integer | Sequence(Integer){1..aRackElement.numberOfRacks})]
[aRackElement.rackType.eClass().name.toLowerFirst()/]_[aRackElement.rackType.base_Component.name/]_[index/].out --> {datarate=[network.getBandwidth()/];} --> dataCenterNetwork.inStorage++;
[aRackElement.rackType.eClass().name.toLowerFirst()/]_[aRackElement.rackType.base_Component.name/]_[index/].in <-- {datarate=[network.getBandwidth()/];} <-- dataCenterNetwork.outStorage++;
[/for]
[/template]

[template public generateScenario(aCloudInfrastructure : CloudInfrastructure)]
// ---------------------------------------------------------------
//   Definition of the scenario
// ---------------------------------------------------------------
network [aCloudInfrastructure.base_Component.name/]{

	parameters:
		string appList;
		string vmList;
		string userList;
		string dataCentersList;

	// -------------------------------------------------------
	//   Definition of main modules
	// -------------------------------------------------------
	submodules:

		// ---------------------------------------------------------------
		//   Definition of the data-centers
		// ---------------------------------------------------------------
		[aCloudInfrastructure.datacenterElements.generateScenarioDataCenter()/]

		[aCloudInfrastructure.generateScenarioCloudProvider()/]

		[aCloudInfrastructure.generateScenarioUserGenerator()/]
	
	[aCloudInfrastructure.generateScenarioConnections()/]
}
[/template]

[template public generateScenarioDataCenter(aDataCenterElement : DataCenterElement)]
[for (index : Integer | Sequence(Integer){1..aDataCenterElement.numberOfDataCenters})]
dc_[aDataCenterElement.dataCenterType.base_Component.name/]_[index/]:[aDataCenterElement.dataCenterType.base_Component.name/]{
	parameters:
		appList=appList;
		vmList=vmList;
		userList=userList;
}
[/for]
[/template]

[template public generateScenarioCloudProvider(aCloudInfrastructure : CloudInfrastructure)]
// -------------------------------------------------------
//   Definition of the cloud provider
// -------------------------------------------------------
cloudProvider:CloudProvider[aCloudInfrastructure.cloudProvider.resourceAllocationPolicy/]{
	parameters:
		appList=appList;
		vmList=vmList;
		userList=userList;
		dataCentersList=dataCentersList;
		@display("p=245,221;i=provider");

	gates:
		fromDataCenter['['/][aCloudInfrastructure.datacenterElements->collectNested(numberOfDataCenters)->sum()/][']'/];
		toDataCenter['['/][aCloudInfrastructure.datacenterElements->collectNested(numberOfDataCenters)->sum()/][']'/];
}
[/template]

[template public generateScenarioUserGenerator(aCloudInfrastructure : CloudInfrastructure)]
// -------------------------------------------------------
//   Definition of the user generator
// -------------------------------------------------------
userGenerator:UserGenerator{
	parameters:
		appList=appList;
		vmList=vmList;
		userList=userList;
		@display("p=245,368;i=users");
}
[/template]

[template public generateScenarioConnections(aCloudInfrastructure : CloudInfrastructure)]
// ---------------------------------------------------------------
//   Connections section
// ---------------------------------------------------------------
connections allowunconnected:

	// Connections between the cloud provider and each data-center manager
[for (aDataCenterElement : DataCenterElement | aCloudInfrastructure.datacenterElements)]
	[for (index : Integer | Sequence(Integer){1..aDataCenterElement.numberOfDataCenters})]
		cloudProvider.toDataCenter++ --> {datarate=[aCloudInfrastructure.network.getBandwidth()/];} --> dc_[aDataCenterElement.dataCenterType.base_Component.name/]_[index/].fromCloudProvider;
		cloudProvider.fromDataCenter++ <-- {datarate=[aCloudInfrastructure.network.getBandwidth()/];} <-- dc_[aDataCenterElement.dataCenterType.base_Component.name/]_[index/].toCloudProvider;	
	[/for]
[/for]

	cloudProvider.toUserGenerator --> ned.IdealChannel --> userGenerator.fromCloudProvider;
	userGenerator.toCloudProvider --> ned.IdealChannel --> cloudProvider.fromUserGenerator;
[/template]



