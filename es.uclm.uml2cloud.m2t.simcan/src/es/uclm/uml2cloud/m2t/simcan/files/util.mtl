[comment encoding = UTF-8 /]
[module util('http://www.uclm.es/UML/profiles/UML2Cloud/2','http://www.eclipse.org/uml2/5.0.0/UML')]


[comment][query public getEthernet(c : Set(Channel)) : String = Sequence(String){'DataCenterEth10M_channel','DataCenterEth100M_channel','DataCenterEth1G_channel','DataCenterEth10G_channel','DataCenterEth40G_channel','DataCenterEth100G_channel'}->at(Sequence(Channel){Channel::Ethernet10Mbps, Channel::Ethernet100Mbps, Channel::Ethernet1Gbps, Channel::Ethernet10Gbps, Channel::Ethernet40Gbps,Channel::Ethernet100Gbps}->indexOf(c->asSequence()->first()))/][/comment]

[comment][query public getDataCenters(aScenario : Scenario) : Sequence(DataCenter) = (aScenario.siblings(DataCenter)->select(d : DataCenter | aScenario.base_Package.packagedElement->includes(d.base_Component))) /][/comment]

[query public getNodeType(aRack : Rack) : Machine = if (aRack.oclIsTypeOf(ComputingRack)) then (aRack.oclAsType(ComputingRack).machineType) else (if(aRack.oclIsTypeOf(StorageRack)) then (aRack.oclAsType(StorageRack).machineType) else (null) endif) endif /]

[query public getFolderName(aCloudInfrastructure : CloudInfrastructure) : String = aCloudInfrastructure.base_Component.name+'/' /]

[query public getTime(time : Time) : String = time.value.toString()+time.unit/]

[query public getTimeUnitInHours(timeUnit : TimeUnit) : Real = Sequence(Real){1,1/60,1/(60*60),1/(60*60*1000),1/(60*60*1000*1000)}->at(Sequence(SizeUnit){TimeUnit::h, TimeUnit::min, TimeUnit::s, TimeUnit::ms, TimeUnit::us}->indexOf(timeUnit))/]

[query public getTimeUnitInMinutes(timeUnit : TimeUnit) : Real = 60*timeUnit.getTimeUnitInHours()/]

[query public getTimeUnitInSeconds(timeUnit : TimeUnit) : Real = 60*timeUnit.getTimeUnitInMinutes()/]

[query public getHours(time : Time) : Real = time.value*time.unit.getTimeUnitInHours()/]

[query public getSeconds(time : Time) : Real = time.value*time.unit.getTimeUnitInSeconds()/]

[query public getBandwidth(bandwidth : Bandwidth) : String = bandwidth.value.toString()+bandwidth.unit/]

[query public getSizeUnit(sizeUnit : SizeUnit) : String = Sequence(String){'TiB','GiB','MiB','KiB'}->at(Sequence(SizeUnit){SizeUnit::TByte, SizeUnit::GByte, SizeUnit::MByte, SizeUnit::KByte}->indexOf(sizeUnit))/]

[query public getSize(size : Size) : String = size.value.toString()+size.unit.getSizeUnit()/]

[query public getCapacity(size : Size) : String = size.value.toString()+Sequence(String){'TB','GB','MB','KB'}->at(Sequence(SizeUnit){SizeUnit::TByte, SizeUnit::GByte, SizeUnit::MByte, SizeUnit::KByte}->indexOf(size.unit))/]

[query public sizeToGB(size : Size) : Real = size.value*Sequence(Real){1000,1,1/1000,1/(1000*1000)}->at(Sequence(SizeUnit){SizeUnit::TByte, SizeUnit::GByte, SizeUnit::MByte, SizeUnit::KByte}->indexOf(size.unit))/]

[query public getLatency(latencies : Set(Latency), name : String) : String =  latencies->any(latency | latency.name.toUpper().strstr(name.toUpper())).time.getTime()/]

[query public getCostPerHour(cost : Cost) : Real = cost.value/cost.rate.getTimeUnitInHours() /]

[query public getUserType(aUser : User) : String = if (aUser.oclIsTypeOf(RegularUser)) then ('Regular') else (if(aUser.oclIsTypeOf(PriorityUser)) then ('Priority') else ('Regular') endif) endif /]

[query public getReservedComputingMachines(aDataCenter : DataCenter) : Integer = aDataCenter.rackElements->select(aRackElement : RackElement | aRackElement.rackType.oclIsTypeOf(ComputingRack))->select(aRackElement : RackElement | aRackElement.rackType.oclAsType(ComputingRack).machineType=MachineType::Reserved)->collectNested(numberOfRacks*rackType.boards*rackType.machinesPerBoard)->sum() /]